// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  HOST
  GUEST
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  userId        String       @unique
  name          String
  email         String       @unique
  password      String
  emailVerified DateTime?
  image         String?      @db.Text
  type          UserType     @default(GUEST)
  accounts      Account[]
  sessions      Session[]
  campground    Campground[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campground {
  id            String @id @default(cuid())
  name          String
  address       String
  detailAddress String

  call String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  checkIn  DateTime?
  checkOut DateTime?

  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image String @db.Text
  room  Room[]

  @@index([userId])
}

model Room {
  id   String @id @default(cuid())
  name String

  isVisible Boolean @default(false)

  baseGuestNumber    Int @default(0)
  maximumGuestNumber Int @default(0)
  additionalPrice    Int @default(0)

  peakSeasonPrice     Int @default(0)
  semiPeakSeasonPrice Int @default(0)
  offSeasonPrice      Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campId    String
  camp      Campground  @relation(fields: [campId], references: [id], onDelete: Cascade)
  roomImage RoomImage[]

  @@index([campId])
}

model RoomImage {
  id String @id @default(cuid())

  imageUrl String @db.Text

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
}
